<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
	">

    <import resource="spring-ivbatch-job-mybatis.xml"/>

    <bean id="exceptionHandler" class="com.invest.ivbatch.common.error.SpringExceptionHandler"/>

    <batch:step id="abstractStep" abstract="true">
        <batch:listeners>
            <batch:listener ref="exceptionHandler"/>
        </batch:listeners>
    </batch:step>

    <bean id="abstractCursorReader" abstract="true"
          class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="ivbatchDataSource"/>
    </bean>

    <!-- Configures a JobRepository using a relational database  作业执行上下文表，用于存放作业执行器上下文的信息  -->
    <batch:job-repository id="jobRepository" data-source="ivbatchDataSource"
                          transaction-manager="ivbatchTransactionManager"/>

    <!-- 作业调度器 -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <!-- Must set this -->
    <bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>

    <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>

    <!-- add test job begin -->
    <!--无skip 直接中断step-->
    <!--<batch:job id="testJob" restartable="true">
        <batch:step id="step1" parent="abstractStep">
            <batch:tasklet transaction-manager="ivbatchTransactionManager" start-limit="3" allow-start-if-complete="true">
                &lt;!&ndash; 每个chunk执行完commit-interval=2即提交一次，可以同时开多个chunk &ndash;&gt;
                <batch:chunk reader="cvsFileItemReader" processor="reportProcessor" writer="reportWriter"
                             commit-interval="2">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>-->

    <!--普通skip-->
    <!--<batch:job id="testJob" restartable="true">
        <batch:step id="step1" parent="abstractStep">
            <batch:tasklet transaction-manager="ivbatchTransactionManager" allow-start-if-complete="true">
                &lt;!&ndash; 每个chunk执行完commit-interval=2即提交一次，可以同时开多个chunk &ndash;&gt;
                &lt;!&ndash; skip-limit 最多可以容错次数，超过这个数，该STEP中断 &ndash;&gt;
                <batch:chunk reader="cvsFileItemReader" processor="reportProcessor" writer="reportWriter"
                             commit-interval="2" skip-limit="10">
                    &lt;!&ndash; skippable-exception-classes 里面配需要SKIP的异常类型 &ndash;&gt;
                    <batch:skippable-exception-classes>
                        <batch:include class="java.lang.IllegalAccessException" />
                        <batch:include class="java.lang.IllegalStateException" />
                    </batch:skippable-exception-classes>
                </batch:chunk>
                &lt;!&ndash; The listeners for a step definition of any type relevant for a step (extensions of StepListener), &ndash;&gt;
                <batch:listeners>
                    <batch:listener ref="skipListener" />
                </batch:listeners>
            </batch:tasklet>
        </batch:step>
    </batch:job>-->

    <!--重试-->
    <batch:job id="testJob" restartable="true">
        <batch:step id="step1" parent="abstractStep">
            <batch:tasklet transaction-manager="ivbatchTransactionManager" allow-start-if-complete="true">
                <batch:chunk reader="cvsFileItemReader" processor="reportProcessor" writer="reportWriter"
                             commit-interval="2" retry-limit="3">
                    <batch:retryable-exception-classes>
                        <!-- 抛出IllegalArgumentException异常 需要重试3次process处理 -->
                        <batch:include class="java.lang.IllegalArgumentException"/>
                    </batch:retryable-exception-classes>
                </batch:chunk>
                <!-- The listeners for a step definition of any type relevant for a step (extensions of StepListener), -->
                <batch:listeners>
                    <batch:listener ref="retryListener"/>
                </batch:listeners>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <!-- 添加listener去打日志 -->
    <bean id="skipListener" class="com.invest.ivbatch.listeners.TestFirstJobSkipListener">
    </bean>
    <bean id="retryListener" class="com.invest.ivbatch.listeners.TestFirstJobRetryListener">
    </bean>

    <!-- add people desc job end -->

    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <!-- Read a csv file -->
        <property name="resource" value="classpath:report.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="id,name"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="report"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <bean id="report" class="com.invest.ivbatch.model.Report" scope="prototype"/>
    <bean id="reportWriter" class="com.invest.ivbatch.writers.ReportWriter"/>
    <bean id="reportProcessor" class="com.invest.ivbatch.processors.ReportProcessor"/>

</beans>